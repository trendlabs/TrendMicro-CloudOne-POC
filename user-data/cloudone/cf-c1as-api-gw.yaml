AWSTemplateFormatVersion: "2010-09-09"
Description: An Image Classification app using Lambda with a vulnerability for demos.

Resources:
  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "ApplicationSecurity-DEMO"
      Description: "API Gateway for a sample app using Application Security"
      BinaryMediaTypes:
      - "multipart/form-data"

  ApiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "ANY"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "LambdaApiGatewayHandler.Arn"
      ResourceId: !GetAtt "ApiGateway.RootResourceId"
      RestApiId: !Ref "ApiGateway"

  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "ApiGatewayRootMethod"
    Properties:
      RestApiId: !Ref "ApiGateway"
      StageName: "release"


  LambdaApiGatewayHandler:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Simple API Gateway Handler"
      Environment:
        Variables:
          TREND_AP_READY_TIMEOUT: 30
      Runtime: python3.7
      Handler: index.handler
      Code:
        ZipFile: |
          def handler(event, context):
              print("EVENT: %s" % (event,))
              content = ""

              if event.get("queryStringParameters") and 'file' in event["queryStringParameters"]:
                  filename = event["queryStringParameters"]['file']
                  try:
                      with open(filename, 'r') as f:
                          content = f.read()
                          content = content.replace('\0', '\n')
                  except BaseException:
                      return _403()

              BODY = """<!DOCTYPE html>
              <html>
              <head>
                <title>Trend Micro Cloud One - Application Security AWS Lambda Demo Site</title>
              </head>
              <body>
                <h3>Trend Micro Cloud One - Application Security AWS Lambda Demo Site</h3>
                <pre>%s</pre>
              </body>
              """ % content

              return {
                  'statusCode': 200,
                  'headers': {
                      'Content-Type': 'text/html; charset=utf8'
                  },
                  'isBase64Encoded': False,
                  'body': BODY,
              }


          def _403():
              return {
                  'statusCode': 403,
                  'headers': {
                  },
                  'isBase64Encoded': False,
                  'body': 'Blocking Unusual Activity with Your Attempt to Access AWS Lambda',
              }
      MemorySize: 512
      Timeout: 15
      Role: !GetAtt "LambdaApiGatewayIAMRole.Arn"

  LambdaApiGatewayInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaApiGatewayHandler.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/"

  LambdaApiGatewayIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
      Policies:
      - PolicyName: "lambda"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "cloudwatch:PutMetricData"
            Resource: "*"
          - Effect: "Allow"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            - "iam:ListAttachedRolePolicies"
            - "iam:AttachRolePolicy"
            Resource: "*"

  LambdaApiGatewayHandlerLogGroup:
      Type: "AWS::Logs::LogGroup"
      Properties:
          LogGroupName: !Join ["/", ["/aws/lambda", !Ref 'LambdaApiGatewayHandler' ]]
          RetentionInDays: 3


Outputs:
  ApiGatewayInvokeURL:
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/release"
